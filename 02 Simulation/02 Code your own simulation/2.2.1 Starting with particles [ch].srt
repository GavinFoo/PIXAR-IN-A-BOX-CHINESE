 1
00:00:00,000 --> 00:00:00,000
PIXAR IN A BOX 艾墨镇 aimozhen.com/pixarinabox

2
00:00:03,362 --> 00:00:05,306
- 在上一节课中 我们建立了一个模型

3
00:00:05,306 --> 00:00:08,095
对卷曲发丝进行了动作模拟

4
00:00:08,095 --> 00:00:10,273
我们的模型使用多种负重弹簧

5
00:00:10,273 --> 00:00:12,792
给了我们这样的效果

6
00:00:12,792 --> 00:00:14,786
这节课的目标是通过写电脑代码

7
00:00:14,786 --> 00:00:16,937
来进行动作仿真

8
00:00:16,937 --> 00:00:19,175
在这节课开始之前 我们需要考虑一件事

9
00:00:19,175 --> 00:00:21,536
就是我们将会用到一些牛顿方程

10
00:00:21,536 --> 00:00:24,210
来使我们的模型动起来

11
00:00:24,210 --> 00:00:27,400
并且我们还会探索 这些方程是如何作用于我们的特效章节的

12
00:00:30,400 --> 00:00:33,852
首先 让我们来模拟一个非常简单的模型吧

13
00:00:33,852 --> 00:00:35,876
一个仅有重力体验的粒子

14
00:00:35,876 --> 00:00:39,462
它从屏幕的某个位置开始掉落

15
00:00:39,462 --> 00:00:41,927
我将要写的程序会模拟出这一模型

16
00:00:41,927 --> 00:00:44,426
它将分为两部分

17
00:00:44,426 --> 00:00:47,052
在顶部 我会把初始系统设置放在这里

18
00:00:47,052 --> 00:00:49,445
比如粒子的起始位置或者重力大小

19
00:00:49,445 --> 00:00:52,121
在下面的这部分 我们将会用到函数图像绘制工具

20
00:00:52,121 --> 00:00:53,660
来实现动画效果

21
00:00:53,660 --> 00:00:56,198
那么首先 我们来定义初始设置吧

22
00:00:56,198 --> 00:00:58,168
重力是我们想要控制的

23
00:00:58,168 --> 00:01:00,905
所以我们来定义重力变量

24
00:01:00,905 --> 00:01:02,397
将它设置为10

25
00:01:02,397 --> 00:01:03,954
我们可以之后来修改它

26
00:01:03,954 --> 00:01:06,874
我们还需要另一个储存粒子质量的变量

27
00:01:06,874 --> 00:01:09,352
我现在先把它设置成30 另外还有一个变量

28
00:01:09,352 --> 00:01:12,199
即粒子掉落的最初高度

29
00:01:12,199 --> 00:01:15,078
我把它称作 Y 轴坐标

30
00:01:15,078 --> 00:01:17,773
我们还需要一个关于粒子初始速度的变量

31
00:01:17,773 --> 00:01:20,703
我称它为 Y 轴速度

32
00:01:20,703 --> 00:01:23,461
在模拟的最开始 我们使粒子掉落之前

33
00:01:23,461 --> 00:01:26,028
我们先将它设置为零

34
00:01:26,028 --> 00:01:28,129
最后 我们需要一种方式

35
00:01:28,129 --> 00:01:29,795
来控制模拟的速度

36
00:01:29,795 --> 00:01:32,629
我将通过一种叫迭代时间的变量来做到这点

37
00:01:32,629 --> 00:01:34,950
将迭代时间想成

38
00:01:34,950 --> 00:01:37,096
每次绘制更新之间流逝的时间

39
00:01:37,096 --> 00:01:39,164
迭代时间值越大 两帧之间的粒子运动速度越快

40
00:01:39,164 --> 00:01:41,191
值越小

41
00:01:41,191 --> 00:01:42,705
粒子运动速度就越慢

42
00:01:42,705 --> 00:01:47,203
现在让我们来思考一下 在函数图像绘制工具里会发生什么吧

43
00:01:47,203 --> 00:01:49,549
当我们运行程序时 电脑首先会

44
00:01:49,549 --> 00:01:52,379
执行一次初始设置

45
00:01:52,379 --> 00:01:56,084
接着通过绘制工具每秒多次循环

46
00:01:56,084 --> 00:01:58,364
所以在绘制工具中

47
00:01:58,364 --> 00:02:00,768
我们动画里的每一帧都是单程的

48
00:02:00,768 --> 00:02:03,929
首先 我将计算作用在粒子上的力

49	
00:02:03,929 --> 00:02:06,711
目前 唯一作用在其上的力就是重力

50
00:02:06,711 --> 00:02:08,681
它是一个向下的作用力

51
00:02:08,681 --> 00:02:10,805
我将这个向下的力储存为一个变量

52
00:02:10,805 --> 00:02:12,562
称为 Y 轴作用力

53
00:02:12,562 --> 00:02:15,581
根据牛顿第二定律 我们知道这个作用力＝粒子质量＊重力加速度

54
00:02:15,581 --> 00:02:18,360
根据牛顿第二定律 我们知道这个作用力＝粒子质量＊重力加速度

55
00:02:18,360 --> 00:02:20,288
根据牛顿第二定律 我们知道这个作用力＝粒子质量＊重力加速度

56
00:02:20,288 --> 00:02:22,431
接下来 我将用这个作用力来定义

57
00:02:22,431 --> 00:02:25,384
我们的粒子向下加速的速度

58
00:02:25,384 --> 00:02:28,317
我将把这个值储存在一个新的变量里

59
00:02:28,317 --> 00:02:29,138
叫做 Y 轴加速度

60
00:02:31,138 --> 00:02:33,824
为此 我会重排一下简便公式

61
00:02:33,824 --> 00:02:37,686
f＝ma 可以得知 Y 轴加速度＝Y 轴作用力／质量

62
00:02:37,686 --> 00:02:39,526
f＝ma 可以得知 Y 轴加速度＝Y 轴作用力／质量

63
00:02:39,526 --> 00:02:41,322
注意在之前的步骤里

64
00:02:41,322 --> 00:02:43,640
我们已经计算过了 Y 轴作用力的大小

65
00:02:43,640 --> 00:02:46,572
现在我们就能推出粒子的加速度是多少了

66
00:02:46,572 --> 00:02:48,833
我们还可以通过公式来更新粒子的速度

67
00:02:48,833 --> 00:02:52,455
Y 轴速度＝ Y 轴速度＋ Y 轴加速度＊迭代时间

68
00:02:52,455 --> 00:02:53,926
Y 轴速度＝ Y 轴速度＋ Y 轴加速度＊迭代时间

69
00:02:54,926 --> 00:02:57,425
我们在特效章节里得出了这个公式

70
00:02:57,425 --> 00:02:59,828
现在来检验它的更多细节吧

71
00:02:59,828 --> 00:03:02,006
注意等式右边的速度变量

72
00:03:02,006 --> 00:03:04,294
是我们之前储存的初始速度值

73
00:03:04,294 --> 00:03:05,479
是我们之前储存的初始速度值

74
00:03:06,479 --> 00:03:08,895
等到这一行执行后 等式左边的速度变量

75
00:03:08,895 --> 00:03:12,628
将会储存更新后的速度值

76
00:03:12,628 --> 00:03:15,312
最后 我们可以用这个速度值

77
00:03:15,312 --> 00:03:19,042
通过方程引出粒子的新位置

78
00:03:19,042 --> 00:03:23,167
Y 轴坐标＝ Y 轴坐标＋ Y 轴速度＊迭代时间

79
00:03:24,167 --> 00:03:26,964
和之前一样 等式右边的 Y 轴坐标变量

80
00:03:26,964 --> 00:03:29,246
是我们之前储存的初始坐标值

81
00:03:29,246 --> 00:03:30,965
是我们之前储存的初始坐标值

82
00:03:30,965 --> 00:03:33,651
等到这一行执行后 等式左边的 Y 轴坐标变量

83
00:03:33,651 --> 00:03:36,871
将会储存下一个坐标值

84
00:03:36,871 --> 00:03:40,366
注意我们是怎样在每一步的运算中

85
00:03:40,366 --> 00:03:42,395
使用上一步的结果的

86
00:03:42,395 --> 00:03:46,706
初始力的运算结果被用来推出加速度

87
00:03:46,706 --> 00:03:48,860
加速度用来推出速度

88
00:03:48,860 --> 00:03:51,376
而速度又用来更新坐标

89
00:03:51,376 --> 00:03:52,911
现在是有趣的部分了

90
00:03:52,911 --> 00:03:55,178
我们来将粒子画到它的新位置上

91
00:03:55,178 --> 00:03:58,199
要做到这点 我们仅需要将 Y 轴坐标变量作为高度

92
00:03:58,199 --> 00:04:00,022
来画一个圆

93
00:04:00,022 --> 00:04:02,405
在这里我用到了椭圆函数

94
00:04:02,405 --> 00:04:05,412
来画一个宽高相等的圆

95
00:04:05,412 --> 00:04:08,661
现在我们来运行程序看看会发生什么吧

96
00:04:08,661 --> 00:04:10,970
哎呀 我想要在我们每次移动它时能够清除之前的圆圈

97
00:04:10,970 --> 00:04:13,163
好让它看起来像是一个掉落的东西

98
00:04:13,163 --> 00:04:15,812
而不是这个弯曲的路径

99
00:04:15,812 --> 00:04:18,415
我会在每次画新圆圈时

100
00:04:18,415 --> 00:04:21,410
通过清除或重设屏幕来修复这个问题

101
00:04:21,410 --> 00:04:23,211
我们再试一次

102
00:04:23,211 --> 00:04:24,613
非常好

103
00:04:24,613 --> 00:04:26,738
如果我将重力增加

104
00:04:26,738 --> 00:04:28,267
我们的粒子就会像我们想象的那样更快地掉落了

105
00:04:31,267 --> 00:04:33,389
这就是牛顿定律中的运动规律在模拟程序中的应用

106
00:04:33,389 --> 00:04:36,000
就让我们停在这里吧 以便你能够舒服地掌握这些代码 aimozhen.com/pixarinabox

