1
00:00:00,000 --> 00:00:00,000
PIXAR IN A BOX 艾墨镇 aimozhen.com/pixarinabox

2
00:00:00,974 --> 00:00:02,783
(introductory sound)

3
00:00:03,783 --> 00:00:04,867
In the previous video,

4
00:00:04,867 --> 00:00:07,448
we've talked about what color a point on a surface is

5
00:00:07,448 --> 00:00:09,509
by considering three factors:

6
00:00:09,509 --> 00:00:12,207
One, how much light falls on the point.

7
00:00:12,207 --> 00:00:14,585
Two, how the surface reflects light,

8
00:00:14,585 --> 00:00:18,244
and three, where the camera is.

9
00:00:18,244 --> 00:00:19,307
For the first factor,

10
00:00:19,307 --> 00:00:20,792
the ray tracer needs to determine

11
00:00:20,792 --> 00:00:22,298
if the point being considered

12
00:00:22,298 --> 00:00:24,900
is visible to the light source.

13
00:00:24,900 --> 00:00:26,803
This is actually pretty easy to answer.

14
00:00:26,803 --> 00:00:29,082
The ray tracer constructs a ray that starts at the point

15
00:00:29,082 --> 00:00:31,278
being shaded and launches off in the direction

16
00:00:31,278 --> 00:00:33,017
of the light source.

17
00:00:33,017 --> 00:00:34,893
These rays to light sources

18
00:00:34,893 --> 00:00:37,631
are called, naturally enough, shadow rays.

19
00:00:37,631 --> 00:00:39,462
Here's an example of an point that is visible

20
00:00:39,462 --> 00:00:41,400
to the light source, because the shadow ray

21
00:00:41,400 --> 00:00:43,780
doesn't hit anything but the light source.

22
00:00:43,780 --> 00:00:46,284
It's important to notice that only some of the light

23
00:00:46,284 --> 00:00:49,175
falling on a point comes directly from the light sources.

24
00:00:49,175 --> 00:00:51,390
This is called direct illumination.

25
00:00:51,390 --> 00:00:52,846
In the real world, some of the light

26
00:00:52,846 --> 00:00:55,999
comes from other objects in the scene as well.

27
00:00:55,999 --> 00:00:58,339
Notice that I can bounce light off this card,

28
00:00:58,339 --> 00:01:01,834
which you can see adds to the light hitting my face.

29
00:01:01,834 --> 00:01:05,830
This is an example of indirect illumination.

30
00:01:05,830 --> 00:01:08,114
As another example of indirect illumination,

31
00:01:08,114 --> 00:01:10,181
you can see a reflection of the tennis ball

32
00:01:10,181 --> 00:01:12,281
in the pool ball.

33
00:01:12,281 --> 00:01:14,294
A ray tracer can account for such reflections

34
00:01:14,294 --> 00:01:18,057
by sending another ray in the reflection direction.

35
00:01:18,057 --> 00:01:19,447
The direction of this reflective ray

36
00:01:19,447 --> 00:01:22,153
is determined by how a light ray would bounce naturally

37
00:01:22,153 --> 00:01:25,183
in the same way a pool ball bounces.

38
00:01:25,183 --> 00:01:27,908
This technique was used, for instance, in Cars 2

39
00:01:27,908 --> 00:01:30,476
because reflections off shiny cars were super important

40
00:01:30,476 --> 00:01:32,637
to the look of the film.

41
00:01:33,637 --> 00:01:36,651
If the object is partially transparent, like this glass cup,

42
00:01:36,651 --> 00:01:38,358
the ray tracer can do a similar thing

43
00:01:38,358 --> 00:01:41,500
and launch a ray in the refracted direction.

44
00:01:41,500 --> 00:01:43,974
Refracted rays pass through an object

45
00:01:43,974 --> 00:01:47,507
while reflected rays bounce off of them.

46
00:01:47,507 --> 00:01:50,474
When the rays pass through an object, such as this glass,

47
00:01:50,474 --> 00:01:52,212
the rays bend in different directions

48
00:01:52,212 --> 00:01:55,218
instead of in straight lines, which explains why

49
00:01:55,218 --> 00:01:58,688
the image you see of me through this glass looks warped.

50
00:01:58,688 --> 00:02:02,104
(ding)

51
00:02:03,104 --> 00:02:05,754
The ray tracer can keep doing this, casting rays,

52
00:02:05,754 --> 00:02:08,412
sending out reflective and refractive rays

53
00:02:08,412 --> 00:02:12,170
to account for reflections, the refractions, and so on.

54
00:02:12,170 --> 00:02:13,735
Then, it uses all of these rays

55
00:02:13,735 --> 00:02:16,871
to determine the final pixel color.

56
00:02:16,871 --> 00:02:18,181
In this next exercise, you can test

57
00:02:18,181 --> 00:02:20,000
your understanding of these concepts. aimozhen.com/pixarinabox

