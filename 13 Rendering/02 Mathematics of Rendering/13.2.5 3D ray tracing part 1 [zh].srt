1
00:00:00,000 --> 00:00:03,184
PIXAR IN A BOX 艾墨镇 aimozhen.com/pixarinabox

2
00:00:03,184 --> 00:00:05,053
- 现在我们会 2D 中做光线追踪了

3
00:00:05,053 --> 00:00:06,780
我们终于可以回到那个

4
00:00:06,780 --> 00:00:09,766
我们实际想解决的问题：在 3D 中做光线追踪

5
00:00:09,766 --> 00:00:12,265
具体来说 我们需要光线追踪平面

6
00:00:12,265 --> 00:00:14,372
房屋和终极目标 角色

7
00:00:16,372 --> 00:00:18,387
像卡尔这样的角色是很复杂的

8
00:00:18,387 --> 00:00:20,805
但是 正如我们在角色建模课程中讨论的一样

9
00:00:20,805 --> 00:00:22,755
他能被分解成许多微小的

10
00:00:22,755 --> 00:00:26,570
四边形 也就是 四边面

11
00:00:27,570 --> 00:00:30,577
而每个四边形都可以被转化为两个三角形

12
00:00:30,577 --> 00:00:33,665
只要加上一条连接对角点的边就可以

13
00:00:33,665 --> 00:00:34,884
That leads to the question:
这就引出了一个问题：

14
00:00:34,884 --> 00:00:37,180
你如何将一条射线和一个三角形相交的呢？

15
00:00:37,180 --> 00:00:39,070
这就是光线追踪渲染器

16
00:00:39,070 --> 00:00:41,544
需要处理的最基础的运算之一

17
00:00:42,544 --> 00:00:45,673
这里就有一个仅有一个三角形的场景

18
00:00:45,673 --> 00:00:48,945
我们的真实场景含有数百万的三角形

19
00:00:48,945 --> 00:00:51,727
但是 一旦我们知道了如何与一个三角形做相交

20
00:00:51,727 --> 00:00:55,831
我们的光线追踪渲染器就会一遍又一遍地一直这样做

21
00:00:55,831 --> 00:00:57,777
嗯 我并不认识你 我也不想

22
00:00:57,777 --> 00:00:59,488
一遍一遍地重复做一件事情

23
00:00:59,488 --> 00:01:01,561
所以 有电脑帮我们做这种事情真是太好了

24
00:01:01,561 --> 00:01:03,061
它们也不会厌倦这样做的

25
00:01:04,061 --> 00:01:07,858
在 2D 中 我们开始于建立起一套坐标系

26
00:01:07,858 --> 00:01:12,343
这次呢 我们有了三个轴向 X、Y 和 Z

27
00:01:13,343 --> 00:01:16,799
如同我们早先解释的 我们选一个相机位点

28
00:01:16,799 --> 00:01:19,537
称为 C 以及一个视向

29
00:01:20,537 --> 00:01:22,203
接着我们构建了一个像平面

30
00:01:22,203 --> 00:01:24,905
它与视向垂直

31
00:01:24,905 --> 00:01:27,679
我们的图像就在此处产生

32
00:01:29,679 --> 00:01:32,525
让我们选个像平面上的像素点 P

33
00:01:32,525 --> 00:01:34,494
并建立起射线 CP 的参数方程

34
00:01:34,494 --> 00:01:39,653
也就是 R(t) = (1-t)*C +t*P

35
00:01:44,653 --> 00:01:47,355
这和我们在 2D 中看到的方程是一样的

36
00:01:47,355 --> 00:01:50,708
但它现在代表了三个分立的方程

37
00:01:50,708 --> 00:01:53,855
一个与 X 坐标相关 一个与 Y 坐标相关

38
00:01:53,855 --> 00:01:55,164
一个与 Z 坐标相关

39
00:01:58,164 --> 00:02:00,155
还记得 上个视频中

40
00:02:00,155 --> 00:02:02,410
我们明白 在二维中 每条线

41
00:02:02,410 --> 00:02:07,872
都可以写成行隐式 ax+by+c = 0

42
00:02:10,872 --> 00:02:13,661
与这类似的是一个平面的表达式

43
00:02:14,661 --> 00:02:16,953
而每个三角形都会落在一个平面内

44
00:02:17,953 --> 00:02:21,242
平面的隐式方程为

45
00:02:21,242 --> 00:02:26,443
ax+by+cz+d = 0

46
00:02:32,443 --> 00:02:35,668
我们要找的 焦点 I

47
00:02:35,668 --> 00:02:38,492
就在三角形所在的平面上

48
00:02:38,492 --> 00:02:43,139
也就是 a*I_x+b*I_y+c*I_z+d = 0

49
00:02:49,139 --> 00:02:54,437
I_x、I_y 和 I_z 表示 I 的坐标

50
00:02:55,437 --> 00:02:59,886
它也同样在射线上 意味着会有一个 t 值

51
00:02:59,886 --> 00:03:04,548
我们称它为 t* 使得 I = R(t*)

52
00:03:06,548 --> 00:03:11,049
等于 (1-t*)*C + (t*)*P

53
00:03:13,049 --> 00:03:16,871
也就是现在展示的三个方程

54
00:03:16,871 --> 00:03:20,809
一个表示 X 一个表示 Y 一个表示 Z

55
00:03:21,809 --> 00:03:25,648
现在我们就有了四个方程和四个未知数

56
00:03:25,648 --> 00:03:27,497
为了解决这个方程组

57
00:03:27,497 --> 00:03:29,691
我们可以按照 2D 中的方式

58
00:03:29,691 --> 00:03:33,755
将后三个方程带入第一个中

59
00:03:33,755 --> 00:03:37,574
我们就获得了仅有未知数 t* 的方程

60
00:03:37,574 --> 00:03:40,337
但是 我们发现 当你讲所有这些都代入之后

61
00:03:40,337 --> 00:03:42,918
方程看起来非常吓人

62
00:03:42,918 --> 00:03:45,173
但是 请记住 它并不那么糟糕

63
00:03:45,173 --> 00:03:46,380
我们只是将一个值

64
00:03:46,380 --> 00:03:48,907
从一个方程带到另一个中

65
00:03:49,907 --> 00:03:52,751
解出 t* 并代回

66
00:03:52,751 --> 00:03:57,617
射线方程中以获得 I_x、I_y 和 I_z

67
00:03:59,617 --> 00:04:01,143
我们知道我们走得有点快

68
00:04:01,143 --> 00:04:02,911
但下一个练习题会让你多练练

69
00:04:02,911 --> 00:04:05,000
计算焦点 aimozhen.com/pixarinabox

